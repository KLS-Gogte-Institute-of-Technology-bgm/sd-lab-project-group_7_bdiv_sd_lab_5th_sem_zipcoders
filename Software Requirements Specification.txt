Functional requirements:

Requirement 1: Receive audio stream
Description:
The voice interface instance should be able to receive a local audio stream.
Criticality
High. This is an essential feature.
Dependency
This functional requirement depends on an interface requirement - interfacing with other Tango (ERAS C3) objects. (See the software interface requirement.)

Requirement 2: Classify audio signal addressee
Description
A voice interface agent (instance) needs to be able to determine whether or not the stream it’s receiving contains linguistic content directed at it.
Criticality
High. This is an essential feature.
Dependency
This functional requirement depends on receiving an audio stream (the first functional requirement).

Requirement 3: Map relevant signal to word sequence
Description
A voice interface software agent needs to infer from the audio signal what a matching word sequence is; library availability and efficiency vs. effectiveness trade-offs will determine how complex this needs to be (e.g. committing to a single most- probable word stream from t=0 forward vs. holding some small number of candidate word sequences in parallel and dynamically reranking them as the signal unfolds).
Criticality
High. This is an essential feature.
Dependency
Requirement 3 depends on requirement 2 (identifying whether a linguistic utterance is a rover command).
NB Requirement 2 can be viewed as a strict subset (albeit one notable enough to pick out) of requirement 3: in its simplest form (starting any command for some rover with the rover’s name), the spoken form corresponding to an address is a command to ‘listen carefully to the rest of what I [the current speaker] have to say.’

Requirement 4: Map word sequence to action request
Description
Given a word sequence (or probability estimates over a small number of the most probable word sequences), a voice interface software agent must attempt to determine what action(s) is (are) being requested of the rover.
Criticality
High. This is an essential feature.
Dependency
This functional requirement is dependent on feature 3 (mapping a signal deemed relevant to a word sequence).

Requirement 5: User Feedback
Description
The voice recognition software agent may not recognize or understand some or all of an utterance it believes directed at it; the voice interface instance ought, in such cases, be able to provide appropriate feedback to users.
To start, a voice interface agent will be able to send text error messages more useful and informative to an end-user who knows little or nothing about the ERAS voice interface library, Tango, or how voice recognition works than what a developer would use for debugging - stack traces and programmer/scientific jargon will NOT be acceptable. These can either be transmitted (and viewed) as text or via synthesized speech.
Criticality
High. This is an essential feature.
Dependency
This functional requirement is a real-time error recovery mechanism; at least one of requirements 1-4 needs some minimum level of functionality before development on feedback messages make much sense. That said, requirements 3 and 4 - mapping an audio signal to a word sequence and interpreting what the requested action associated with that sequence is - will likely be the functional requirement most subject to errors and that users therefore are most likely to want feedback on.

Requirement 6: Rich Feedback
Description
Synthesized speech (minimally text-to-speech versions of the text error messages), differential length/detail feedback, context-based-inference, and non-verbal graphical feedback are variations in feedback that will allow an astronaut to more easily able to understand why the voice interface (or the rover) is not understanding or complying with the astronaut’s request and what they can do to change this, as circumstances allow.
Criticality
Medium. Graceful recovery from failure will be important in avoiding frustration on the part of users in the face of brittle technology.
Dependency
This functional requirement is dependent on requirement 5 and the software interface requirements.

Requirement 7: Enhanced Natural Language Processing & Understanding
Description
The minimal specifications don’t make use of any particularly complex natural language technologies other than speech recognition (knowledge of a language’s phonetics and phonology); syntax is represented in a very simple, impoverished, and inflexible form; ‘conversation’ is also a rather lop-sided affair. A detailed and robust rover executive with an explicit ontology of objects in the world, model of self and speakers, and more detailed grammar (of the language in question, of the speech patterns of the astronauts actually on the mission) would allow for a more natural interface with less of a learning curve; astronauts would likely spend less time worrying about how much they need to adjust their answers for the primitiveness of the rover and what the recognized types and sequences of magic words are to make it do their bidding.

Specifically, a part of speech tagger, proper name identification/named- entity-extraction, more complex syntactic and semantic parsers, and a dialog manager, with the latter interfacing with a planning agent (and its associated formal framework) are starting areas for growth. In particular, investing time in developing a dialog manager (or the prerequisites thereof) may be the single most worthwhile investment for additional functionality in the voice interface, permitting more less code to do more work (instead of explicitly and duplicatively hand-coding the edge-cases - e.g. error recovery - for each type of task).
Criticality
Low/Medium.
Criticality depends in part on testing; if a simpler system is good enough for intended uses, adding more complicated natural language processing components may end up at worst compromising performance (NLP/NLU is CPU-intensive and might be a bottleneck in voice command processing), the learning/training curve (the system may take a long time to learn enough data from users to function correctly where a simpler system may work well-enough ‘out of the box’), and of course add to the tasks of software development and maintenance.
Dependency
This functional requirement necessitates functional requirements 1-5, at minimum, and potentially at least further knowledge of planned aspects of the rover software executive.

Requirement 8: Learning mechanisms
Description
After initial testing of each feature and use-case scenario, bottlenecks in functionality (at least earlier in the data-flow, given the nature of compounding errors and dependencies among functional requirements 1-5) should become identifiable; the ability to learn from each episode of each feature use and thereby both improve a the voice interface instance’s statistical models of speech, language, and understanding as well as to add new ‘vocabulary’ items (named entities and ‘voice macros’) could be an important means of minimizing astronaut frustration and effort while maximizing an astronaut’s ability to direct a rover as they please.
Criticality
Medium/low; depends on how well or poorly the other features function and how important extension of the grammar and/or vocabulary seem like they would be in testing more primitive versions.
Dependency
Low/medium. This feature could plausibly be examined and worked on as each of feature requirements 1-5, 6, and 7 are completed, although some analysis will require the first five to be done.

Requirement 9: Store User Data
Description:
For any user software, the storage of data is most important. So this requirement will be fulfilled with the help of SQLite3 DB.

Requirement 10: User Interface
Description:
Once the user runs the software, GUI are the ones which which play a role of UI and also help in fetching user data and later these data can be stored in DB.

Requirement 11: Gaming 
Description:
Gaming is the additional requirement which we have fulfilled using PyGame module of Python.


Non-Functional requirements:
Performance:
System should recognize to any Voices in his list without any fault.
With ideal conditions, system response should be fast and error free.
System performance shall not decrease with time or by usage.
Performance and speed should not depend on type of computing device, but just those need to support the python environment.

Security Requirements:
Change the data is only allowed to the creator or admin and forbidden to other users.
Program / Software run without web that means it is protected from online malware.

Software Quality Attributes:
Availability:
This software is up to date and offer right voice search.

Flexibility:
Easy to use and because of Exception handling technique the software doesn’t crash while using, if anything goes wrong proper messages are displayed.
Robustness:
No wrong information is processed.
